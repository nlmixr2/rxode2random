[{"path":"https://nlmixr2.github.io/rxode2random/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew L. Fidler. Author, maintainer. Wenping Wang. Contributor. Bill Denney. Contributor.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang W, Hallow K, James D (2015). “Tutorial RxODE: Simulating Differential Equation Pharmacometric Models R.” CPT: Pharmacometrics \\& Systems Pharmacology, 5(1), 3–10. ISSN 2163-8306, https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728294/.","code":"@Article{,   title = {A Tutorial on RxODE: Simulating Differential Equation Pharmacometric Models in R},   author = {Wenping Wang and K Melissa Hallow and David A James},   journal = {CPT: Pharmacometrics \\& Systems Pharmacology},   year = {2015},   volume = {5},   pages = {3--10},   number = {1},   month = {nov},   abstract = {This tutorial presents the application of an R package, RxODE, that facilitates quick, efficient simulations of ordinary differential equation models completely within R. Its application is illustrated through simulation of design decision effects on an adaptive dosing regimen. The package provides an efficient, versatile way to specify dosing scenarios and to perform simulation with variability with minimal custom coding. Models can be directly translated to Rshiny applications to facilitate interactive, real-time evaluation/iteration on simulation scenarios.},   address = {Hoboken},   issn = {2163-8306},   publisher = {John Wiley and Sons Inc.},   url = {https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728294/}, }"},{"path":"https://nlmixr2.github.io/rxode2random/index.html","id":"rxode2random","dir":"","previous_headings":"","what":"Random Number Generation Functions for rxode2","title":"Random Number Generation Functions for rxode2","text":"goal rxode2random split ‘rxode2’ random number generation ode solving C compilation models.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Random Number Generation Functions for rxode2","text":"can install development version rxode2random GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nlmixr2/rxode2parse\") devtools::install_github(\"nlmixr2/rxode2random\")"},{"path":"https://nlmixr2.github.io/rxode2random/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Random Number Generation Functions for rxode2","text":"mostly random number generation can select matrix cvPost()","code":"library(rxode2random) set.seed(5) # set the seed so that the documentation stays the same, only cvPost(10, lotri::lotri(a+b~c(1,0.5,1)), n=3) #> [[1]] #>           a         b #> a 1.7297338 0.8219411 #> b 0.8219411 1.6643538 #>  #> [[2]] #>           a         b #> a 0.5663245 0.2300909 #> b 0.2300909 1.3883101 #>  #> [[3]] #>          a         b #> a 2.025453 0.4974050 #> b 0.497405 0.8670084"},{"path":"https://nlmixr2.github.io/rxode2random/reference/cvPost.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"Note Inverse wishart rescaled match original scale covariance matrix.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/cvPost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"","code":"cvPost(   nu,   omega,   n = 1L,   omegaIsChol = FALSE,   returnChol = FALSE,   type = c(\"invWishart\", \"lkj\", \"separation\"),   diagXformType = c(\"log\", \"identity\", \"variance\", \"nlmixrSqrt\", \"nlmixrLog\",     \"nlmixrIdentity\") )"},{"path":"https://nlmixr2.github.io/rxode2random/reference/cvPost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"nu Degrees Freedom (Number Observations) covariance matrix simulation. omega Either estimate covariance matrix estimated standard deviations matrix form row forming standard deviation simulated values n Number Matrices sample.  default 1. useful omega matrix.  Otherwise determined number rows input omega matrix standard deviations omegaIsChol indicator omega matrix Cholesky decomposition. used codetype=\"invWishart\" returnChol Return Cholesky decomposition covariance matrix sample. used codetype=\"invWishart\" type type covariance posterior simulated.  can : invWishart posterior inverse wishart; allows correlations parameters modeled.  uncertainty parameter captured degrees freedom parameter. lkj posterior separates standard deviation estimates (modeled outside provided omega argument) correlation estimates. correlation estimate simulated rLKJ1().  simulation uses relationship eta=(nu-1)/2.  relationship based proof relationship restricted LKJ-distribution inverse wishart distribution (XXXXXX).  correlation posterior calculated, estimated standard deviations combined simulated correlation matrix create covariance matrix. separation Like lkj option, separates estimation correlation standard deviation.  Instead using LKJ distribution simulate correlation, simulates inverse wishart identity matrix converts result correlation matrix.  correlation matrix used standard deviation calculate simulated covariance matrix. diagXformType Diagonal transformation type.  : log standard deviations log transformed, actual standard deviations exp(omega) identity standard deviations transformed. standard deviations transformed;  positive. variance variances specified omega matrix; transformed standard deviations. nlmixrSqrt standard deviations come nlmixr omega matrix diag(chol(inv(omega))) = x^2 nlmixrLog standard deviations come nlmixr omega matrix omega matrix diag(chol(solve(omega))) = exp(x) nlmixrIdentity standard deviations come nlmixr omega matrix omega matrix diag(chol(solve(omega))) = x nlmixr transformations make sense -diagonal correlations modeled.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/cvPost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"matrix (n=1) list matrices  (n > 1)","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/cvPost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"covariance matrix 1x1 matrix, uses scaled inverse chi-squared equivalent Inverse Wishart distribution uni-directional case. general, separation strategy preferred diagonal matrices.  dimension matrix 10, lkj numerically faster separation method.  However, lkj method densities close zero (XXXX) dimension 10.  case, though computationally expensive separation method performs better. matrices modeled covariances, easiest method use inverse Wishart allows simulation correlation matrices (XXXX).  method well suited well behaved matrices, variance components low high.  modeling nonlinear mixed effects modeling matrices high low variances considered sub-optimal describing system.  rules mind, reasonable use inverse Wishart.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/cvPost.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"Alvarez , Niemi J Simpson M. (2014) Bayesian Inference Covariance Matrix. Conference Applied Statistics Agriculture. https://newprairiepress.org/cgi/viewcontent.cgi?article=1004&context=agstatconference Wang1 Z, Wu Y, Chu H. (2018) Equivalence LKJ distribution restricted Wishart distribution. arXiv:1809.04746","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/cvPost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"Matthew L.Fidler & Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/cvPost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"","code":"## Sample a single covariance. draw1 <- cvPost(3, matrix(c(1, .3, .3, 1), 2, 2))  ## Sample 3 covariances set.seed(42) draw3 <- cvPost(3, matrix(c(1, .3, .3, 1), 2, 2), n = 3)  ## Sample 3 covariances, but return the cholesky decomposition set.seed(42) draw3c <- cvPost(3, matrix(c(1, .3, .3, 1), 2, 2), n = 3, returnChol = TRUE)  ## Sample 3 covariances with lognormal standard deviations via LKJ ## correlation sample cvPost(3, sapply(1:3, function(...) {   rnorm(10) }), type = \"lkj\") #> [[1]] #>           [,1]      [,2]      [,3] #> [1,] 96.862339 0.7748630 -4.626203 #> [2,]  0.774863 0.0283645  0.119055 #> [3,] -4.626203 0.1190550  4.094623 #>  #> [[2]] #>             [,1]       [,2]       [,3] #> [1,]  0.06218003 0.05815138 -0.5246680 #> [2,]  0.05815138 0.70904612  0.3915278 #> [3,] -0.52466798 0.39152780  7.9264641 #>  #> [[3]] #>            [,1]       [,2]       [,3] #> [1,]  0.5725945 -0.7039115  0.3184467 #> [2,] -0.7039115 11.3514944 -0.9360070 #> [3,]  0.3184467 -0.9360070  0.2958648 #>  #> [[4]] #>            [,1]      [,2]       [,3] #> [1,]  0.7659467 -2.803861  0.3011139 #> [2,] -2.8038607 44.273527 -9.4665546 #> [3,]  0.3011139 -9.466555  2.7453546 #>  #> [[5]] #>            [,1]        [,2]        [,3] #> [1,] 3.56762745  0.07176028  0.13656513 #> [2,] 0.07176028  0.42276523 -0.02050365 #> [3,] 0.13656513 -0.02050365  0.03225709 #>  #> [[6]] #>           [,1]      [,2]      [,3] #> [1,] 0.5663711 0.0340262 0.1454173 #> [2,] 0.0340262 0.5977762 0.3269646 #> [3,] 0.1454173 0.3269646 0.2082704 #>  #> [[7]] #>              [,1]         [,2]         [,3] #> [1,]  0.004927562 -0.002843181  0.005520158 #> [2,] -0.002843181  0.029412775 -0.013463952 #> [3,]  0.005520158 -0.013463952  0.182352220 #>  #> [[8]] #>              [,1]        [,2]         [,3] #> [1,]  0.007589923 -0.06216448  0.002859140 #> [2,] -0.062164482  2.50977902 -0.118417072 #> [3,]  0.002859140 -0.11841707  0.007999188 #>  #> [[9]] #>            [,1]       [,2]       [,3] #> [1,] 14.0163806  1.2051675  0.8401261 #> [2,]  1.2051675  0.2780401 -0.1994978 #> [3,]  0.8401261 -0.1994978  1.0749189 #>  #> [[10]] #>            [,1]       [,2]       [,3] #> [1,]  0.5415731 -0.7109454  0.4040513 #> [2,] -0.7109454  2.4865600 -0.4319643 #> [3,]  0.4040513 -0.4319643  1.5098302 #>   ## or return cholesky decomposition cvPost(3, sapply(1:3, function(...) {   rnorm(10) }), type = \"lkj\", returnChol = TRUE ) #> [[1]] #>         [,1]      [,2]       [,3] #> [1,] 1.86548 0.9644577 -1.1377549 #> [2,] 0.00000 0.5131372  0.7633548 #> [3,] 0.00000 0.0000000  1.3396488 #>  #> [[2]] #>           [,1]       [,2]      [,3] #> [1,] 0.3853808 -0.2396288 0.2759888 #> [2,] 0.0000000  0.8531100 0.3904699 #> [3,] 0.0000000  0.0000000 3.9907672 #>  #> [[3]] #>           [,1]       [,2]        [,3] #> [1,] 0.5811021 0.02348261 0.040235833 #> [2,] 0.0000000 0.30199556 0.006542798 #> [3,] 0.0000000 0.00000000 0.326766208 #>  #> [[4]] #>          [,1]       [,2]       [,3] #> [1,] 1.787819 -0.5701632 0.02973627 #> [2,] 0.000000  1.7537550 0.16276115 #> [3,] 0.000000  0.0000000 0.38911063 #>  #> [[5]] #>          [,1]       [,2]        [,3] #> [1,] 2.155836 -0.1976721 -0.27043101 #> [2,] 0.000000  0.7801646  0.06882305 #> [3,] 0.000000  0.0000000  0.16161284 #>  #> [[6]] #>          [,1]       [,2]        [,3] #> [1,] 1.590053 0.07434835 -0.17317880 #> [2,] 0.000000 0.82964610  0.13403995 #> [3,] 0.000000 0.00000000  0.07785199 #>  #> [[7]] #>           [,1]      [,2]       [,3] #> [1,] 0.4123939 0.2062854 -0.8475394 #> [2,] 0.0000000 2.5346241  0.4594744 #> [3,] 0.0000000 0.0000000  0.4939941 #>  #> [[8]] #>          [,1]       [,2]         [,3] #> [1,] 0.332944 -0.6235242 -0.002281778 #> [2,] 0.000000  2.1873959  0.885067020 #> [3,] 0.000000  0.0000000  1.705736993 #>  #> [[9]] #>          [,1]      [,2]      [,3] #> [1,] 4.539001 0.4690774 -2.300368 #> [2,] 0.000000 3.9959179 -1.030652 #> [3,] 0.000000 0.0000000  2.165767 #>  #> [[10]] #>          [,1]         [,2]      [,3] #> [1,] 1.294237 2.545228e-05 -0.891757 #> [2,] 0.000000 6.211554e-01 -1.993399 #> [3,] 0.000000 0.000000e+00  1.819896 #>   ## Sample 3 covariances with lognormal standard deviations via separation ## strategy using inverse Wishart correlation sample cvPost(3, sapply(1:3, function(...) {   rnorm(10) }), type = \"separation\") #> [[1]] #>            [,1]       [,2]        [,3] #> [1,] 17.8091343 0.73461953 -1.39358522 #> [2,]  0.7346195 0.43703688  0.08246014 #> [3,] -1.3935852 0.08246014  0.39231482 #>  #> [[2]] #>             [,1]       [,2]        [,3] #> [1,]  0.11144462  0.2079765 -0.08551474 #> [2,]  0.20797652  9.2698949 -0.16544961 #> [3,] -0.08551474 -0.1654496  0.08403645 #>  #> [[3]] #>            [,1]       [,2]       [,3] #> [1,]  0.7908562 -0.5415399 -0.8590748 #> [2,] -0.5415399  0.3821333  0.5923616 #> [3,] -0.8590748  0.5923616  0.9845958 #>  #> [[4]] #>            [,1]        [,2]        [,3] #> [1,] 11.0562602  0.33123520  1.27030624 #> [2,]  0.3312352  0.42048853 -0.01175715 #> [3,]  1.2703062 -0.01175715  0.20178261 #>  #> [[5]] #>           [,1]     [,2]      [,3] #> [1,] 0.3908392 1.232200 0.3605851 #> [2,] 1.2321999 4.029834 1.1549621 #> [3,] 0.3605851 1.154962 0.3440444 #>  #> [[6]] #>           [,1]      [,2]       [,3] #> [1,] 0.9003795 0.2147410  3.1855956 #> [2,] 0.2147410 0.1209066  0.7990146 #> [3,] 3.1855956 0.7990146 13.1359204 #>  #> [[7]] #>            [,1]       [,2]       [,3] #> [1,]  0.8417985 -0.8216620 -0.7381474 #> [2,] -0.8216620  0.9218277  0.7890609 #> [3,] -0.7381474  0.7890609  0.7039473 #>  #> [[8]] #>             [,1]        [,2]        [,3] #> [1,]  0.16942278  0.01244557 -0.01024524 #> [2,]  0.01244557  0.04491023 -0.07210998 #> [3,] -0.01024524 -0.07210998  0.11723618 #>  #> [[9]] #>            [,1]      [,2]       [,3] #> [1,]  0.4109154 -1.842263 -0.7241764 #> [2,] -1.8422630 10.322635  3.4070393 #> [3,] -0.7241764  3.407039  1.3859887 #>  #> [[10]] #>            [,1]       [,2]       [,3] #> [1,]  0.9428107 -0.7354081  0.6621306 #> [2,] -0.7354081  0.5785147 -0.5232715 #> [3,]  0.6621306 -0.5232715  0.4840937 #>   ## or returning the cholesky decomposition cvPost(3, sapply(1:3, function(...) {   rnorm(10) }), type = \"separation\", returnChol = TRUE ) #> [[1]] #>           [,1]       [,2]       [,3] #> [1,] 0.5361344 -0.5646490 -1.2157714 #> [2,] 0.0000000  0.2706145  0.7833376 #> [3,] 0.0000000  0.0000000  1.4143150 #>  #> [[2]] #>           [,1]       [,2]       [,3] #> [1,] 0.4763222 -0.1686305 -0.2638639 #> [2,] 0.0000000  0.3953129  0.2370631 #> [3,] 0.0000000  0.0000000  0.2553825 #>  #> [[3]] #>          [,1]       [,2]        [,3] #> [1,] 1.457362 -0.1565739 0.003957496 #> [2,] 0.000000  0.2969488 0.004259446 #> [3,] 0.000000  0.0000000 0.034623292 #>  #> [[4]] #>           [,1]      [,2]       [,3] #> [1,] 0.2697727 0.1901255  0.1775689 #> [2,] 0.0000000 0.1863785 -0.4415488 #> [3,] 0.0000000 0.0000000  1.3256841 #>  #> [[5]] #>          [,1]       [,2]       [,3] #> [1,] 1.081252 -0.2458460 0.05591077 #> [2,] 0.000000  0.4958417 0.11182166 #> [3,] 0.000000  0.0000000 0.07342814 #>  #> [[6]] #>           [,1]      [,2]       [,3] #> [1,] 0.4513931 -1.555660  0.9059502 #> [2,] 0.0000000  1.430568 -0.3169197 #> [3,] 0.0000000  0.000000  0.7111382 #>  #> [[7]] #>          [,1]      [,2]       [,3] #> [1,] 5.850312 0.3103629 -3.1410818 #> [2,] 0.000000 0.3115511  0.2156489 #> [3,] 0.000000 0.0000000  2.5678462 #>  #> [[8]] #>           [,1]        [,2]        [,3] #> [1,] 0.3920281 -0.17091427  1.44657948 #> [2,] 0.0000000  0.01081568 -0.09688330 #> [3,] 0.0000000  0.00000000  0.08276372 #>  #> [[9]] #>          [,1]       [,2]       [,3] #> [1,] 2.021659 -0.6427884  0.8126606 #> [2,] 0.000000  0.2158093 -0.3291584 #> [3,] 0.000000  0.0000000  0.3722985 #>  #> [[10]] #>           [,1]      [,2]      [,3] #> [1,] 0.4696165 0.1467044 -1.908483 #> [2,] 0.0000000 0.4906213  3.952318 #> [3,] 0.0000000 0.0000000 10.894538 #>"},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-cbindOme.html","id":null,"dir":"Reference","previous_headings":"","what":"cbind Ome — .cbindOme","title":"cbind Ome — .cbindOme","text":"cbind Ome","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-cbindOme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cbind Ome — .cbindOme","text":"","code":".cbindOme(et, mat, n)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-cbindOme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cbind Ome — .cbindOme","text":"et theta data frame mat full matrix simulation omegas n number subject simulated","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-cbindOme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cbind Ome — .cbindOme","text":"data frame et combined simulated omega matrix values","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-cbindOme.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cbind Ome — .cbindOme","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-expandPars.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand parameters — .expandPars","title":"Expand parameters — .expandPars","text":"Expand parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-expandPars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand parameters — .expandPars","text":"","code":".expandPars(object, params, events, control)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-expandPars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand parameters — .expandPars","text":"object rxode2 model variables object params parameters expand events event table help expansion control control structure help parameter generation","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-expandPars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand parameters — .expandPars","text":"Expanded parameters simulation","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-expandPars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expand parameters — .expandPars","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-vecDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric vector to repeated data.frame — .vecDf","title":"Convert numeric vector to repeated data.frame — .vecDf","text":"Convert numeric vector repeated data.frame","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-vecDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric vector to repeated data.frame — .vecDf","text":"","code":".vecDf(vec, n)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-vecDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric vector to repeated data.frame — .vecDf","text":"vec Named input vector n Number columns","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-vecDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert numeric vector to repeated data.frame — .vecDf","text":"Data frame repeated vec","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/dot-vecDf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert numeric vector to repeated data.frame — .vecDf","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/invWR1d.html","id":null,"dir":"Reference","previous_headings":"","what":"One correlation sample from the Inverse Wishart distribution — invWR1d","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"correlation constructed transformation Inverse Wishart random covariate correlation.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/invWR1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"","code":"invWR1d(d, nu, omegaIsChol = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/invWR1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"d dimension correlation matrix nu Degrees freedom Wishart distribution omegaIsChol indicator omega matrix Cholesky decomposition. used codetype=\"invWishart\"","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/invWR1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"One correlation sample inverse wishart","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/invWR1d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative distribution of standard normal — phi","title":"Cumulative distribution of standard normal — phi","text":"Cumulative distribution standard normal","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative distribution of standard normal — phi","text":"","code":"phi(q)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative distribution of standard normal — phi","text":"q vector quantiles","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative distribution of standard normal — phi","text":"cumulative distribution standard normal distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/phi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cumulative distribution of standard normal — phi","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/phi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative distribution of standard normal — phi","text":"","code":"# phi is equivalent to pnorm(x) phi(3) #> [1] 0.9986501  # See pnorm(3) #> [1] 0.9986501  # This is provided for NONMEM-like compatibility in rxode2 models"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rLKJ1.html","id":null,"dir":"Reference","previous_headings":"","what":"One correlation sample from the LKJ distribution — rLKJ1","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"One correlation sample LKJ distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rLKJ1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"","code":"rLKJ1(d, eta = 1, cholesky = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rLKJ1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"d dimension correlation matrix eta scaling parameter LKJ distribution. Must > 1.  Also related degrees freedom nu. eta = (nu-1)/2. cholesky boolean; TRUE return cholesky decomposition.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rLKJ1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"correlation sample LKJ distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rLKJ1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"Matthew Fidler (translated RcppArmadillo) Emma Schwager","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. lotri lotri rxode2parse .convertId","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rinvchisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaled Inverse Chi Squared distribution — rinvchisq","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"Scaled Inverse Chi Squared distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rinvchisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"","code":"rinvchisq(n = 1L, nu = 1, scale = 1)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rinvchisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"n Number random samples nu degrees freedom inverse chi square scale Scale inverse chi squared distribution (default 1).","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rinvchisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"vector inverse chi squared deviates.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rinvchisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"","code":"rinvchisq(3, 4, 1) ## Scale = 1, degrees of freedom = 4 #> [1] 0.7142789 1.5154244 1.6435521 rinvchisq(2, 4, 2) ## Scale = 2, degrees of freedom = 4 #> [1] 1.097227 2.797669"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxGetSeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the rxode2 seed — rxGetSeed","title":"Get the rxode2 seed — rxGetSeed","text":"Get rxode2 seed","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxGetSeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the rxode2 seed — rxGetSeed","text":"","code":"rxGetSeed()"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxGetSeed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the rxode2 seed — rxGetSeed","text":"rxode2 seed state -1 seed set","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxGetSeed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the rxode2 seed — rxGetSeed","text":"","code":"# without setting seed  rxGetSeed() #> [1] -1 # Now set the seed rxSetSeed(42)  rxGetSeed() #> [1] 42  rxnorm() #> [1] 0.2229005  rxGetSeed() #> [1] 44  # don't use the rxode2 seed again  rxSetSeed(-1)  rxGetSeed() #> [1] -1  rxnorm() #> [1] -0.8344933  rxGetSeed() #> [1] -1"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxPp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a from a Poisson process — rxPp","title":"Simulate a from a Poisson process — rxPp","text":"Simulate Poisson process","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxPp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a from a Poisson process — rxPp","text":"","code":"rxPp(   n,   lambda,   gamma = 1,   prob = NULL,   t0 = 0,   tmax = Inf,   randomOrder = FALSE )"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxPp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a from a Poisson process — rxPp","text":"n Number time points simulate Poisson process lambda Rate Poisson process gamma Asymmetry rate Poisson process.  gamma=1.0, simulates homogenous Poisson process.  gamma<1.0, Poisson process events early, gamma > 1.0, Poisson process events late process. gamma non-zero, tmax infinite indicate end Poisson process simulated.  pharamcometric cases, end study. Internally uses rate : l(t) = lambdagamma(t/tmax)^(gamma-1) prob specified, probability function one argument, time, gives probability Poisson time t accepted rejection time. t0 starting time Poisson process tmax maximum time Poisson process randomOrder TRUE randomize order Poisson events.  default (FALSE) returns Poisson process order events occurred.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxPp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a from a Poisson process — rxPp","text":"returns vector Poisson process times; dropout >= tmax, rest times = tmax indicate dropout equal tmax.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxPp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a from a Poisson process — rxPp","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxPp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a from a Poisson process — rxPp","text":"","code":"## Sample homogenous Poisson process of rate 1/10 rxPp(10, 1 / 10) #>  [1]  1.560519  2.393774 12.691104 12.832895 12.985304 18.294459 27.409655 #>  [8] 28.833302 29.132053 30.549960  ## Sample inhomogenous Poisson rate of 1/10  rxPp(10, 1 / 10, gamma = 2, tmax = 100) #>  [1] 11.53112 15.12508 21.31092 28.89251 42.05832 46.36393 51.14902 76.31013 #>  [9] 82.12071 90.82746  ## Typically the Poisson process times are in a sequential order, ## using randomOrder gives the Poisson process in random order  rxPp(10, 1 / 10, gamma = 2, tmax = 10, randomOrder = TRUE) #>  [1]  0.6174213 10.0000000 10.0000000 10.0000000 10.0000000 10.0000000 #>  [7] 10.0000000  6.9951306 10.0000000 10.0000000  ## This uses an arbitrary function to sample a non-homogenous Poisson process  rxPp(10, 1 / 10, prob = function(x) {   1 / x }) #> Error: 'prob' function should return values between 0 and 1"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxRmvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from a (truncated) multivariate normal — rxRmvn","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"simulated fast, thread-safe threefry simulator can use multiple cores generate random deviates.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxRmvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"","code":"rxRmvn(   n,   mu = NULL,   sigma,   lower = -Inf,   upper = Inf,   ncores = 1,   isChol = FALSE,   keepNames = TRUE,   a = 0.4,   tol = 2.05,   nlTol = 1e-10,   nlMaxiter = 100L )"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxRmvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"n Number random row vectors simulated matrix use simulation (faster). mu mean vector sigma Covariance matrix multivariate normal list covariance matrices. list covariance matrix, matrix simulate n matrices combine full matrix lower vector lower bound truncated multivariate norm upper vector upper bound truncated multivariate norm ncores Number cores used simulation isChol boolean indicating sigma cholesky decomposition covariance matrix. keepNames Keep names either mean covariance matrix. threshold switching methods; can tuned maximum speed;  three cases considered: case 1: < l < u case 2: l < u < -case 3: otherwise l=lower u = upper tol case 3 used possibilities, tol value controls acceptance rejection inverse-transformation; abs(u-l)>tol, uses accept-reject randn nlTol Tolerance newton line-search nlMaxiter Maximum iterations newton line-search","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxRmvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"n==integer (default) output (n x d) matrix -th row -th simulated vector. .matrix(n) random vector store n, provided user, function returns NULL invisibly.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxRmvn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"John K. Salmon, Mark . Moraes, Ron O. Dror, David E. Shaw (2011). Parallel Random Numbers: Easy 1, 2, 3. D. E. Shaw Research, New York, NY 10036, USA. thread safe multivariate normal inspired mvnfast package Matteo Fasiolo https://CRAN.R-project.org/package=mvnfast concept truncated multivariate normal taken Zdravko Botev Botev (2017) doi:10.1111/rssb.12162  Botev L'Ecuyer (2015) doi:10.1109/WSC.2015.7408180  converted thread safe simulation;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxRmvn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"Matthew Fidler, Zdravko Botev Matteo Fasiolo","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxRmvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"","code":"## From mvnfast ## Unlike mvnfast, uses threefry simulation  d <- 5 mu <- 1:d  # Creating covariance matrix tmp <- matrix(rnorm(d^2), d, d) mcov <- tcrossprod(tmp, tmp)   set.seed(414) rxRmvn(4, 1:d, mcov) #>            [,1]       [,2]       [,3]     [,4]     [,5] #> [1,]  0.4281796  0.8961586 3.90027665 3.144310 2.659440 #> [2,] -0.1075642 -1.3464338 3.27586623 2.747352 2.949371 #> [3,]  4.1302390  3.1918023 0.07558033 4.828756 5.897353 #> [4,] -0.1817968  1.5098620 3.45393319 3.798816 6.843902  set.seed(414) rxRmvn(4, 1:d, mcov) #>            [,1]       [,2]       [,3]     [,4]     [,5] #> [1,]  0.4281796  0.8961586 3.90027665 3.144310 2.659440 #> [2,] -0.1075642 -1.3464338 3.27586623 2.747352 2.949371 #> [3,]  4.1302390  3.1918023 0.07558033 4.828756 5.897353 #> [4,] -0.1817968  1.5098620 3.45393319 3.798816 6.843902  set.seed(414) rxRmvn(4, 1:d, mcov, ncores = 2) # r.v. generated on the second core are different #>            [,1]       [,2]     [,3]     [,4]     [,5] #> [1,]  0.4281796  3.5841792 3.455956 2.942954 5.815208 #> [2,]  0.4281796  3.5841792 3.455956 2.942954 5.815208 #> [3,] -0.1075642 -0.1725148 2.883767 4.389230 5.809539 #> [4,] -0.1075642 -0.1725148 2.883767 4.389230 5.809539  ###### Here we create the matrix that will hold the simulated #  random variables upfront. A <- matrix(NA, 4, d) class(A) <- \"numeric\" # This is important. We need the elements of A to be of class \"numeric\".  set.seed(414) rxRmvn(A, 1:d, mcov, ncores = 2) # This returns NULL ... A # ... but the result is here #>            [,1]       [,2]     [,3]     [,4]     [,5] #> [1,]  0.4281796  3.5841792 3.455956 2.942954 5.815208 #> [2,]  0.4281796  3.5841792 3.455956 2.942954 5.815208 #> [3,] -0.1075642 -0.1725148 2.883767 4.389230 5.809539 #> [4,] -0.1075642 -0.1725148 2.883767 4.389230 5.809539  ## You can also simulate from a truncated normal:  rxRmvn(10, 1:d, mcov, lower = 1:d - 1, upper = 1:d + 1) #>            [,1]     [,2]     [,3]     [,4]     [,5] #>  [1,] 0.7907865 2.401943 2.791634 4.998496 5.326100 #>  [2,] 1.4542276 1.920439 3.165505 3.894709 4.043283 #>  [3,] 0.5902641 1.029716 3.024185 4.462161 5.822886 #>  [4,] 0.8880729 1.739535 3.061836 4.984464 5.097672 #>  [5,] 0.9891773 1.764719 3.196117 4.907312 5.477384 #>  [6,] 0.7735614 1.097578 2.830009 3.298237 5.322111 #>  [7,] 0.5936143 2.195169 2.989334 4.462135 5.668588 #>  [8,] 1.3516733 2.009184 2.933446 4.887022 4.423623 #>  [9,] 1.4968879 2.488339 2.995883 4.929367 4.682948 #> [10,] 1.1974489 1.528600 2.766949 4.001004 5.665883   # You can also simulate from different matrices (if they match # dimensions) by using a list of matrices.  matL <- lapply(1:4, function(...) {   tmp <- matrix(rnorm(d^2), d, d)   tcrossprod(tmp, tmp) })   rxRmvn(4, setNames(1:d, paste0(\"a\", 1:d)), matL) #>               a1         a2         a3       a4       a5 #>  [1,]  2.1027689 -3.1277802 -1.7058664 3.877449 6.160238 #>  [2,] -0.1528749  0.3372425  1.4079033 3.204818 6.771887 #>  [3,] -1.6178920  2.4185331  4.2854089 4.204923 6.115151 #>  [4,]  5.2850177  6.0162640  1.1522397 6.009218 8.423744 #>  [5,] -0.8389005  1.8108360  3.9390837 2.635257 3.078044 #>  [6,]  2.4044119  0.2584573  2.4396218 4.687467 7.747550 #>  [7,]  7.2635180  5.5533803 -0.2744354 9.627871 4.788654 #>  [8,] -0.3358839 -1.7501935  4.1309667 2.961912 6.318101 #>  [9,]  3.4028706  1.1584222  4.5627803 3.408984 3.627014 #> [10,]  3.4927361 -1.5055971  1.0890217 2.867575 4.036955 #> [11,]  2.2089477 -1.0108105 -0.6234824 1.745858 4.178149 #> [12,]  1.9045759 -3.5353019  3.6738287 3.085417 2.755276 #> [13,] -1.0910176  1.6896066 -0.1344867 5.810620 3.303876 #> [14,]  0.7032309  2.5654064  2.7642640 3.706315 5.057585 #> [15,] -3.4067706  2.3051387  4.4260234 6.692458 8.170364 #> [16,] -3.7727314  4.2737997 -0.8379328 6.990844 1.255809"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSeedEng.html","id":null,"dir":"Reference","previous_headings":"","what":"This seeds the engine based on the number of cores used in random number generation — rxSeedEng","title":"This seeds the engine based on the number of cores used in random number generation — rxSeedEng","text":"seeds engine based number cores used random number generation","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSeedEng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This seeds the engine based on the number of cores used in random number generation — rxSeedEng","text":"","code":"rxSeedEng(ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSeedEng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This seeds the engine based on the number of cores used in random number generation — rxSeedEng","text":"ncores number cores use.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSeedEng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This seeds the engine based on the number of cores used in random number generation — rxSeedEng","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSeedEng.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This seeds the engine based on the number of cores used in random number generation — rxSeedEng","text":"","code":"rxSeedEng() #> NULL"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSetSeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the parallel seed for rxode2 random number generation — rxSetSeed","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"sets seed rxode2 parallel random number generation. set, whenever seed set threefry vandercorput simulation engine, use seed, increment number seeds continue sequence next time random number generator called.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSetSeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"","code":"rxSetSeed(seed)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSetSeed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"seed integer represents rxode2 parallel internal random number generator seed.  positive, use seed random number generation increment reseed parallel new engines called. negative, turn rxode2 seed generate seed R's uniform random number generator.  Best practice set seed.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSetSeed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSetSeed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"contrast, called, time vandercorput threefry simulation engines seeded comes uniform random number generated standard R random seed.  may cause duplicate seed based R seed state. means correlations simulations exist avoid birthday problem picking exactly seed using seed state R random number generator.  times seed called, likely becomes.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSetSeed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"JD Cook. (2016). Random number generator seed mistakes. https://tinyurl.com/m62v3kv9","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSetSeed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxSetSeed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"","code":"rxSetSeed(42)  # seed with generator 42 rxnorm() #> [1] 0.2229005  # Use R's random number generator rnorm(1) #> [1] 0.04863385  rxSetSeed(42)  # reproduces the same number rxnorm() #> [1] 0.2229005  # But R's random number is not the same  rnorm(1) #> [1] 1.220873  # If we reset this to use the R's seed # (internally rxode2 uses a uniform random number to span seeds) # This can lead to duplicate sequences and seeds  rxSetSeed(-1)  # Now set seed works for both.  # This is not recommended, but illustrates the different types of # seeds that can be generated.  set.seed(42)  rxnorm() #> [1] -0.6306035  rnorm(1) #> [1] -0.5646982  set.seed(42)  rxnorm() #> [1] -0.6306035  rnorm(1) #> [1] -0.5646982"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxWithSeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Preserved seed and possibly set the seed — rxWithSeed","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"Preserved seed possibly set seed","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxWithSeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"","code":"rxWithSeed(   seed,   code,   rxseed = rxGetSeed(),   kind = \"default\",   normal.kind = \"default\",   sample.kind = \"default\" )  rxWithPreserveSeed(code)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxWithSeed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"seed R seed use session code code evaluate rxseed rxode2 seed preserved kind character NULL.  kind character     string, set R's RNG kind desired.  Use \"default\"     return R default.  See ‘Details’     interpretation NULL. normal.kind character string NULL.  character     string, set method Normal generation.  Use \"default\"     return R default.  NULL makes change. sample.kind character string NULL.  character     string, set method discrete uniform generation (used      sample, instance).  Use \"default\" return      R default.  NULL makes change.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxWithSeed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"returns whatever code returning","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxWithSeed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"","code":"rxGetSeed() #> [1] -1 rxWithSeed(1, {    print(rxGetSeed())    rxnorm()    print(rxGetSeed())    rxnorm() }, rxseed=3) #> [1] 3 #> [1] 5 #> [1] 0.3606008"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate beta variable from threefry generator — rxbeta","title":"Simulate beta variable from threefry generator — rxbeta","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate beta variable from threefry generator — rxbeta","text":"","code":"rxbeta(shape1, shape2, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate beta variable from threefry generator — rxbeta","text":"shape1, shape2 non-negative parameters Beta distribution. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate beta variable from threefry generator — rxbeta","text":"beta random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate beta variable from threefry generator — rxbeta","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate beta variable from threefry generator — rxbeta","text":"","code":"## Use threefry engine  rxbeta(0.5, 0.5, n = 10) # with rxbeta you have to explicitly state n #>  [1] 0.0002412951 0.4343637136 0.7497465276 0.0198724639 0.2528311641 #>  [6] 0.0477965129 0.1910074617 0.9414777054 0.6474622830 0.5338957993 rxbeta(5, 1, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 0.9152454 0.4620739 0.9219925 0.9622961 0.8957744 0.5002530 0.8823660 #>  [8] 0.9464534 0.5057850 0.9590438  rxbeta(1, 3) #> [1] 0.2876191"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Binomial variable from threefry generator — rxbinom","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"","code":"rxbinom(size, prob, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"size number trials (zero ). prob probability success trial. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"binomial random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"","code":"## Use threefry engine  rxbinom(10, 0.9, n = 10) # with rxbinom you have to explicitly state n #>  [1] 10  9  9  7 10 10 10  9  8  8 rxbinom(3, 0.5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 1 2 2 2 1 2 0 2 2 0  rxbinom(4, 0.7) #> [1] 2"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxcauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Cauchy variable from threefry generator — rxcauchy","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxcauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"","code":"rxcauchy(location = 0, scale = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxcauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"location, scale location scale parameters. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxcauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"Cauchy random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxcauchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxcauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"","code":"## Use threefry engine  rxcauchy(0, 1, n = 10) # with rxcauchy you have to explicitly state n #>  [1] -0.36802162 -0.05013127 -2.25672377 -0.55304533 -1.02673313 -0.39623541 #>  [7] -0.78336678  1.45055866 -0.37882331 -0.41097290 rxcauchy(0.5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] -38.4603599   1.0153787 -11.0835496   1.2025571  -4.2058192  -0.5217225 #>  [7]  -2.9957887   1.5798981  -3.1369837   2.6106266  rxcauchy(3) #> [1] 3.027177"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxchisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate chi-squared variable from threefry generator — rxchisq","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxchisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"","code":"rxchisq(df, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxchisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"df degrees freedom (non-negative, can non-integer). n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxchisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"chi squared random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxchisq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxchisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"","code":"## Use threefry engine  rxchisq(0.5, n = 10) # with rxchisq you have to explicitly state n #>  [1] 7.941055e-01 4.275045e-02 2.404747e-02 8.924047e-01 8.221745e-01 #>  [6] 6.536039e-05 5.070731e-04 4.706523e+00 3.296404e+00 7.592145e-02 rxchisq(5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1]  6.0727706  4.2255448  5.3435285 10.8549424  4.9859683  0.6411627 #>  [7] 10.7708603  1.8168805  2.4289639  0.9542432  rxchisq(1) #> [1] 1.990909"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate exponential variable from threefry generator — rxexp","title":"Simulate exponential variable from threefry generator — rxexp","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate exponential variable from threefry generator — rxexp","text":"","code":"rxexp(rate, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate exponential variable from threefry generator — rxexp","text":"rate vector rates. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate exponential variable from threefry generator — rxexp","text":"exponential random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxexp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate exponential variable from threefry generator — rxexp","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate exponential variable from threefry generator — rxexp","text":"","code":"# \\donttest{  ## Use threefry engine  rxexp(0.5, n = 10) # with rxexp you have to explicitly state n #>  [1] 0.01279471 3.94123844 2.98904444 0.24608033 2.03608165 0.99587818 #>  [7] 2.02850661 0.04220234 0.19949474 3.34714168 rxexp(5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 0.18639347 0.02426826 0.16596050 0.08868743 0.13760805 0.17785199 #>  [7] 0.14670216 0.22780284 0.09303490 0.07668680  rxexp(1) #> [1] 0.1882632  # }"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate F variable from threefry generator — rxf","title":"Simulate F variable from threefry generator — rxf","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate F variable from threefry generator — rxf","text":"","code":"rxf(df1, df2, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate F variable from threefry generator — rxf","text":"df1, df2 degrees freedom.  Inf allowed. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate F variable from threefry generator — rxf","text":"f random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate F variable from threefry generator — rxf","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate F variable from threefry generator — rxf","text":"","code":"## Use threefry engine  rxf(0.5, 0.5, n = 10) # with rxf you have to explicitly state n #>  [1] 5.678346e-05 2.005725e-01 7.297065e+00 6.292906e-01 8.074573e-01 #>  [6] 1.768955e-03 8.977122e-03 1.198314e-05 1.309745e-01 2.286014e+02 rxf(5, 1, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1]    1.5725060  750.8712711    0.4891759 1027.8595045  493.6965182 #>  [6] 2542.7594178    0.3760492    0.4362499   24.2308933    0.9622635  rxf(1, 3) #> [1] 0.2139943"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate gamma variable from threefry generator — rxgamma","title":"Simulate gamma variable from threefry generator — rxgamma","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate gamma variable from threefry generator — rxgamma","text":"","code":"rxgamma(shape, rate = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate gamma variable from threefry generator — rxgamma","text":"shape shape gamma random variable rate alternative way specify scale. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate gamma variable from threefry generator — rxgamma","text":"gamma random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate gamma variable from threefry generator — rxgamma","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate gamma variable from threefry generator — rxgamma","text":"","code":"## Use threefry engine  rxgamma(0.5, n = 10) # with rxgamma you have to explicitly state n #>  [1] 0.0002221357 0.0076994438 0.3983203775 0.1101458968 0.4574600471 #>  [6] 0.2359262035 0.1338387448 0.7157536449 0.0601043829 0.2192117960 rxgamma(5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 2.300383 4.407350 6.604676 4.154914 1.078865 5.816864 9.088511 3.934593 #>  [9] 3.717908 3.916393  rxgamma(1) #> [1] 0.6451981"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgeom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate geometric variable from threefry generator — rxgeom","title":"Simulate geometric variable from threefry generator — rxgeom","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate geometric variable from threefry generator — rxgeom","text":"","code":"rxgeom(prob, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate geometric variable from threefry generator — rxgeom","text":"prob probability success trial. 0 < prob <= 1. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgeom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate geometric variable from threefry generator — rxgeom","text":"geometric random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgeom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate geometric variable from threefry generator — rxgeom","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxgeom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate geometric variable from threefry generator — rxgeom","text":"","code":"## Use threefry engine  rxgeom(0.5, n = 10) # with rxgeom you have to explicitly state n #>  [1] 0 1 0 1 5 0 1 5 1 2 rxgeom(0.25, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 4 2 6 4 8 2 3 0 0 0  rxgeom(0.75) #> [1] 1"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Binomial variable from threefry generator — rxnbinom","title":"Simulate Binomial variable from threefry generator — rxnbinom","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Binomial variable from threefry generator — rxnbinom","text":"","code":"rxnbinom(size, prob, n = 1L, ncores = 1L)  rxnbinomMu(size, mu, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Binomial variable from threefry generator — rxnbinom","text":"size target number successful trials, dispersion     parameter (shape parameter gamma mixing distribution).     Must strictly positive, need integer. prob probability success trial. 0 < prob <= 1. n number observations.  length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; mu alternative parametrization via mean: see ‘Details’.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Binomial variable from threefry generator — rxnbinom","text":"negative binomial random deviates. Note rxbinom2 uses mu parameterization rxbinom uses prob parameterization (mu=size/(prob+size))","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Binomial variable from threefry generator — rxnbinom","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Binomial variable from threefry generator — rxnbinom","text":"","code":"## Use threefry engine  rxnbinom(10, 0.9, n = 10) # with rxbinom you have to explicitly state n #>  [1] 10 10  7  9  8  9  8 10  9 10 rxnbinom(3, 0.5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 3 3 2 2 0 2 1 1 1 3  rxnbinom(4, 0.7) #> [1] 2  # use mu parameter rxnbinomMu(40, 40, n=10) #>  [1] 18 19 17 17 20 19 25 19 22 14"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"Simulate random normal variable threefry/vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"","code":"rxnorm(mean = 0, sd = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"mean vector means. sd vector standard deviations. n number observations ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"normal random number deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"","code":"## Use threefry engine  rxnorm(n = 10) # with rxnorm you have to explicitly state n #>  [1]  1.31125946  0.34298624 -1.15771645  0.02768516 -0.42533977  0.51421614 #>  [7]  1.72913886  0.34092896 -0.62575290 -1.24691670 rxnorm(n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1]  0.1901691 -0.8495735  0.4039625  0.9334171 -0.2836994  0.6076422 #>  [7]  0.3759326 -0.9604859 -1.7918986  0.6725448  rxnorm(2, 3) ## The first 2 arguments are the mean and standard deviation #> [1] 0.8224287"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxode2randomMd5.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the MD5 hash of the current rxode2random revision — rxode2randomMd5","title":"Get the MD5 hash of the current rxode2random revision — rxode2randomMd5","text":"Get MD5 hash current rxode2random revision","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxode2randomMd5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the MD5 hash of the current rxode2random revision — rxode2randomMd5","text":"","code":"rxode2randomMd5()"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxode2randomMd5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the MD5 hash of the current rxode2random revision — rxode2randomMd5","text":"md5 hash rxode2random revision","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxode2randomMd5.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the MD5 hash of the current rxode2random revision — rxode2randomMd5","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxode2randomMd5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the MD5 hash of the current rxode2random revision — rxode2randomMd5","text":"","code":"rxode2randomMd5() #> [1] \"26cf255f3cb0d2f7ac4bfd427f367c42\""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxord.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate ordinal value — rxord","title":"Simulate ordinal value — rxord","text":"Simulate ordinal value","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate ordinal value — rxord","text":"","code":"rxord(...)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate ordinal value — rxord","text":"... probabilities simulated.  sum number one.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate ordinal value — rxord","text":"number 1 (number probabilities specified + 1)","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate ordinal value — rxord","text":"values entered 'rxord' simulation simulate probability falling group. falls outside specified probabilities, simulate group (number probabilities specified + 1)","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate ordinal value — rxord","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate ordinal value — rxord","text":"","code":"# This will give values 1, and 2 rxord(0.5) #> [1] 2 rxord(0.5) #> [1] 1 rxord(0.5) #> [1] 2 rxord(0.5) #> [1] 1  # This will give values 1, 2 and 3 rxord(0.3, 0.3) #> [1] 2 rxord(0.3, 0.3) #> [1] 2 rxord(0.3, 0.3) #> [1] 3"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxpois.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate random Poisson variable from threefry generator — rxpois","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxpois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"","code":"rxpois(lambda, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxpois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"lambda vector (non-negative) means. n number random values return. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxpois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"poission random number deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxpois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxpois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"","code":"## Use threefry engine  rxpois(lambda = 3, n = 10) # with rxpois you have to explicitly state n #>  [1] 2 4 3 5 3 1 4 4 4 2 rxpois(lambda = 3, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 1 5 4 2 4 2 2 2 1 2  rxpois(4) ## The first arguments are the lambda parameter #> [1] 2"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxt.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate student t variable from threefry generator — rxt","title":"Simulate student t variable from threefry generator — rxt","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate student t variable from threefry generator — rxt","text":"","code":"rxt(df, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate student t variable from threefry generator — rxt","text":"df degrees freedom (\\(> 0\\), maybe non-integer).  df       = Inf allowed. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate student t variable from threefry generator — rxt","text":"t-distribution random numbers","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate student t variable from threefry generator — rxt","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate student t variable from threefry generator — rxt","text":"","code":"## Use threefry engine  rxt(df = 3, n = 10) # with rxt you have to explicitly state n #>  [1] -0.3375596  3.5915140 -0.1344446 -0.8844293  0.1701542  2.7903190 #>  [7]  2.2883001 -1.1483235  0.4345389  2.0347778 rxt(df = 3, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] -0.41037354 -0.86990670  0.15300898 -0.50696699 -0.02805413 -0.12978362 #>  [7]  0.43523260  0.68557685  0.58883925 -2.54859300  rxt(4) ## The first argument is the df parameter #> [1] 0.4302867"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxunif.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate uniform variable from threefry generator — rxunif","title":"Simulate uniform variable from threefry generator — rxunif","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxunif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate uniform variable from threefry generator — rxunif","text":"","code":"rxunif(min = 0, max = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxunif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate uniform variable from threefry generator — rxunif","text":"min, max lower upper limits distribution.  Must finite. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxunif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate uniform variable from threefry generator — rxunif","text":"uniform random numbers","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxunif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate uniform variable from threefry generator — rxunif","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxunif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate uniform variable from threefry generator — rxunif","text":"","code":"## Use threefry engine  rxunif(min = 0, max = 4, n = 10) # with rxunif you have to explicitly state n #>  [1] 3.84975015 0.04180323 3.79552461 0.03247190 3.33397455 2.07096545 #>  [7] 1.36305908 0.79465123 0.37261857 3.37173599 rxunif(min = 0, max = 4, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 0.329659617 0.435003406 1.040313883 0.039681940 3.401238863 3.403635250 #>  [7] 1.622730298 0.266147923 0.009111452 1.222125224  rxunif() #> [1] 0.468003"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxweibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Weibull variable from threefry generator — rxweibull","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxweibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"","code":"rxweibull(shape, scale = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxweibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"shape, scale shape scale parameters, latter defaulting 1. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator;","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxweibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"Weibull random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxweibull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Internally ID seeded unique number results depend number cores used.","code":""},{"path":"https://nlmixr2.github.io/rxode2random/reference/rxweibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"","code":"## Use threefry engine  # with rxweibull you have to explicitly state n rxweibull(shape = 1, scale = 4, n = 10) #>  [1] 6.26552615 2.18558929 0.03573581 0.97385623 1.37105686 4.88709894 #>  [7] 7.75048932 7.46638197 1.78085379 3.35058631  # You can parallelize the simulation using openMP rxweibull(shape = 1, scale = 4, n = 10, ncores = 2) #>  [1] 0.08347049 2.78939633 2.38815293 1.10784278 1.15430367 3.59272322 #>  [7] 4.13206984 9.94120630 2.08057615 4.22271191  rxweibull(3) #> [1] 1.285839"},{"path":"https://nlmixr2.github.io/rxode2random/news/index.html","id":"rxode2random-2011","dir":"Changelog","previous_headings":"","what":"rxode2random 2.0.11","title":"rxode2random 2.0.11","text":"CRAN release: 2023-03-28 Fix qassert LTO","code":""},{"path":"https://nlmixr2.github.io/rxode2random/news/index.html","id":"rxode2random-2010","dir":"Changelog","previous_headings":"","what":"rxode2random 2.0.10","title":"rxode2random 2.0.10","text":"CRAN release: 2023-03-17 Moved fast factor rxode2parse allow etTrans moved ","code":""},{"path":"https://nlmixr2.github.io/rxode2random/news/index.html","id":"rxode2random-209","dir":"Changelog","previous_headings":"","what":"rxode2random 2.0.9","title":"rxode2random 2.0.9","text":"CRAN release: 2022-10-11 Initial release rxode2random, separates parallel safe, random number generation ‘rxode2’ separate package reduce ‘rxode2’ compilation time. make CRAN maintenance bit easier. Added NEWS.md file track changes package.","code":""}]
